Generate a list of questions based on the given educational lesson, covering all key aspects of the topic. Pay special attention to methods (functions). The questions will be used in the Anki application.

Question Requirements:
Method Notation:

If the method does not take parameters: <code>methodName()</code>
If the method takes parameters, specify them: <code>methodName(param1, param2)</code>
Types of Questions:

Method description → method name
<i>org.gemini.model.model_test.Example:</i>
"Which method removes an element by index?"
Answer: <code>remove(int index)</code>

Method name → method description
<i>org.gemini.model.model_test.Example:</i>
"What does the method <code>clear()</code> do?"
Answer: Removes all elements from the collection.

Return type (return type identification)
<i>org.gemini.model.model_test.Example:</i>
"What is the return type of the method <code>size()</code>?"
Answer: <code>int</code>

Method overloading
<i>org.gemini.model.model_test.Example:</i>
"What is the difference between <code>add(Object obj)</code> and <code>add(int index, Object obj)</code>?"

Difference between similar methods
<i>org.gemini.model.model_test.Example:</i>
"What is the difference between <code>get()</code> and <code>peek()</code>?"

Method usage and data structure applications
<i>org.gemini.model.model_test.Example:</i>
"When is it preferable to use <code>LinkedList</code> instead of <code>ArrayList</code>?"

Question Formats:

Open-ended questions
Multiple-choice questions
Matching questions
True/False questions
Examples:

Multiple-choice:
"Which method adds an element to the end of a list?"
a) <code>add(int index, Object obj)</code>
b) <code>add(Object obj)</code> ✅
c) <code>put(Object obj)</code>

True/False:
"The <code>contains(Object obj)</code> method checks if an element is present in the collection." ✅

HTML Formatting:

Use HTML for better readability and formatting:
<p> for paragraphs
<code> for code
<b> for highlighting key terms
<ul> and <li> for lists
Question Goals:

Reinforce the material
Develop an understanding of method differences
Deepen knowledge of data structure applications