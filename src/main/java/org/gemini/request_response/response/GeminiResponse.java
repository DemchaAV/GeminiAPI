package org.gemini.request_response.response;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Builder;
import lombok.extern.slf4j.Slf4j;
import org.gemini.request_response.content.Content;
import org.gemini.request_response.content.part.Part;
import org.gemini.request_response.response.candidate.Candidate;
import org.gemini.request_response.response.usageMeta.UsageMetadata;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Root response model for Gemini API calls
 */
@Slf4j
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
public record GeminiResponse(
        List<Prediction> predictions,
        /**
         * List of response candidates generated by the model.
         */
        List<Candidate> candidates,

        /**
         * Metadata about token usage for this request and response.
         */
        UsageMetadata usageMetadata,

        /**
         * The model and version used for generation.
         * For example: gemini-1.5-flash-002.
         */
        String modelVersion
) {
    public String contentAsString() {
        if (candidates == null) {
            log.error(" {} was null in stream processing!!","candidates");
            return null;
        }
        List<Content> contentList = new ArrayList<>(candidates.stream().map(Candidate::content).toList());

        return contentList.stream()
                .map(content -> String.format("role: %s\nmessage: \"%s\"\n",
                        content.role(),
                        content.parts().stream()
                                .map(Part::text)
                                .collect(Collectors.joining()).trim()))
                .collect(Collectors.joining());
    }
    public String asString() {
        if (candidates == null) {
            log.error(" {} was null!!","candidates");
            return null;
        }
        List<Content> contentList = new ArrayList<>(candidates.stream().map(Candidate::content).toList());


        return contentList.stream()
                .map(content ->
                        content.parts().stream()
                                .map(Part::text)
                                .collect(Collectors.joining()).trim())
                .collect(Collectors.joining());
    }

    public void printContent (){
        for(char character: Objects.requireNonNull(asString()).toCharArray()){

            System.out.print(character + "â–ˆ");
            System.out.flush();
            try {
                Thread.sleep(6);
                System.out.print("\b");
            } catch (InterruptedException e) {
                log.error("Occur exception during stream ",e);
                throw new RuntimeException(e);
            }
        }
    }

    public Map<String, List<Content>> takeContentAsMap() {
        return candidates.stream()
                .collect(Collectors.groupingBy(content -> content.content().role(), Collectors.mapping(candidate -> candidate.content(), Collectors.toList())));
    }
}
